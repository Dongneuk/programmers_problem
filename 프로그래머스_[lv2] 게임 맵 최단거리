from collections import deque

def solution(maps):
    
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    
    n, m = len(maps), len(maps[0])
    visited = [[-1] * m for _ in range(n)]
    visited[0][0] = 1
    
    def bfs(a, b):
        
        queue = deque()
        queue.append((a, b))
        
        while queue:
            x, y = queue.popleft()
            
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                
                if 0 <= nx < n and 0 <= ny < m and maps[nx][ny] == 1:
                    if visited[nx][ny] == -1:
                        visited[nx][ny] = visited[x][y] + 1
                        queue.append((nx, ny))
                        
    bfs(0, 0)
    return visited[n-1][m-1]